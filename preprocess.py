from tensorflow.python.keras.utils import np_utils
from music21 import converter, instrument, note, chord, stream 
from tensorflow.keras import utils
import numpy as np
import glob
import pickle

def midi_to_notes(file_directory):
    """
    Gets all the notes and chords of the Midi files in the file directory passed in and returns a list of those notes and chords. 

    :param fileDirectory: the name of the file directory that contains the midi files (str) 
    :return: an array of notes, [str]
    """

    # Gets all midi files in the file directory that's passed in 
    midi_filelink = file_directory + "/*.mid"  

    notes = [] 
    # Loop through all the files in the file directory  
    for file in glob.glob(midi_filelink):
        midi_file = converter.parse(file)
        parts = instrument.partitionByInstrument(midi_file)

        # Interestingly, this condition occurs and we get Fire Emblem (which is a mislabeling). Note that all the MIDI files are single instrument, so regardless, our MIDI files are still uniform. 
        if parts != None:
            notes_to_parse = parts.parts[0].recurse() 
        else:
            notes_to_parse = midi_file.flat.notes
        # Parse through all the notes in the current MIDI file. Notes can be either notes or chords. 
        for element in notes_to_parse:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))

    # Pickle the data at the end, so we can get notes when testing
    with open('data/notes', 'wb') as filepath:
        pickle.dump(notes, filepath)

    return notes 

def get_notes_sequences(notes): 
    """
    Create inputs and labels. 
    
    :param notes: array that contains all of the notes contained in the midi files. 
    :param vocab_size: number of unique notes and chords in notes. 
    :return: A tuple of inputs and labels 
    """
    sequence_length = 100
    
    # Create a dictionary to map unique notes to an index 
    vocab_notes = {}
    index = 0  
    for note in notes:
        if note not in vocab_notes:
            vocab_notes[note] = index 
            index += 1

    vocab_size = len(vocab_notes) 

    network_inputs_1 = []
    network_outputs = [] 

    # Create input sequences and the corresponding outputs
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_inputs_1.append([vocab_notes[char] for char in sequence_in])
        network_outputs.append(vocab_notes[sequence_out])

    network_inputs_2 = network_inputs_1

    n_patterns = len(network_inputs_1)
    # Reshape the input into a format compatible with LSTM layers
    network_inputs_1 = np.reshape(network_inputs_1, (n_patterns, sequence_length, 1))
    # Normalize input
    network_inputs_1 = network_inputs_1 / float(vocab_size)
    normalized_inputs = network_inputs_1 
    network_outputs = np_utils.to_categorical(network_outputs) 

    return (network_inputs_1, network_outputs, network_inputs_2, normalized_inputs, vocab_notes)

def predict_notes(model, network_input, vocab_notes, starting_note = None, num_notes_generate = 150):
    """
    NOTE: IGNORE HEADER COMMENT FOR NOW 

    Converts the notes array passed in to a MIDI file, which can be played using a program such as Synthesia. 

    :param note_to_int: dictionary that maps note to its respective index
    :param starting_note: starting note to start the computer generated song; if none, then a starting note is randomly selected 
    param num_notes_generate: generates the number of notes passed in 

    :return: midi file 
    """
    int_to_note = dict([(value, key) for key, value in vocab_notes.items()]) 
    vocab_size = len(vocab_notes) 

    if starting_note == None:
        starting_note = np.random.randint(0, len(network_input) - 1)

    # List that will hold our predictions 
    pattern = network_input[starting_note]
    predicted_notes = [] 

    for i in range(num_notes_generate):
        print(i) 
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(vocab_size)

        prediction = model.predict(prediction_input, verbose=0)

        index = np.argmax(prediction)
        prediction = int_to_note[index]
        predicted_notes.append(prediction)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return predicted_notes
        
def generate_midi(predicted_notes):
    
    offset = 0
    output_notes = []

    # Create note and chord objects based on the values generated by the model
    for pattern in predicted_notes:
        # Pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # Pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # Increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp='test_output.mid')